docontext:: ['@@', 'Location', ':', 'description', '=', "Information about the users' location."]
 	paths:: ['Location']
 	attrs:: [{'description': "Information about the users' location."}]
	curcontext:: Location ['Location']
	Personis_base.Context(Identifier='Location', Description='Information about the users' location.')
	[]
+++ context created ok
docomponent:: seenby
 	attrs:: [{'value_type': 'string', 'type': 'attribute', 'description': 'sensor that has seen this person'}]
cobj = Personis_base.Component(Identifier="seenby",
		component_type="attribute",
		value_type="string",
		value_list="None",
		resolver="None",
		Description="sensor that has seen this person")
		
+++ component created 
docomponent:: location
 	attrs:: [{'value_type': 'string', 'type': 'attribute', 'description': 'Location'}]
cobj = Personis_base.Component(Identifier="location",
		component_type="attribute",
		value_type="string",
		value_list="None",
		resolver="None",
		Description="Location")
		
+++ component created 
docontext:: ['@@', 'Work', ':', 'description', '=', 'Information about the users work.']
 	paths:: ['Work']
 	attrs:: [{'description': 'Information about the users work.'}]
	curcontext:: Work ['Work']
	Personis_base.Context(Identifier='Work', Description='Information about the users work.')
	[]
+++ context created ok
docomponent:: role
 	attrs:: [{'value_type': 'enum', 'type': 'attribute', 'description': 'the users main role in the organisation', 'value': ['Academic', 'Postgraduate', 'etc']}]
cobj = Personis_base.Component(Identifier="role",
		component_type="attribute",
		value_type="enum",
		value_list="['Academic', 'Postgraduate', 'etc']",
		resolver="None",
		Description="the users main role in the organisation")
		
+++ component created 
docontext:: ['@@', 'Devices', ':', 'description', '=', 'Devices related to the user']
 	paths:: ['Devices']
 	attrs:: [{'description': 'Devices related to the user'}]
	curcontext:: Devices ['Devices']
	Personis_base.Context(Identifier='Devices', Description='Devices related to the user')
	[]
+++ context created ok
docomponent:: syssensors
 	attrs:: [{'value_type': 'string', 'type': 'attribute', 'description': 'list of system activity which detect the user'}]
cobj = Personis_base.Component(Identifier="syssensors",
		component_type="attribute",
		value_type="string",
		value_list="None",
		resolver="None",
		Description="list of system activity which detect the user")
		
+++ component created 
docomponent:: carrying
 	attrs:: [{'value_type': 'string', 'type': 'attribute', 'description': 'Device(s) being carried'}]
cobj = Personis_base.Component(Identifier="carrying",
		component_type="attribute",
		value_type="string",
		value_list="None",
		resolver="None",
		Description="Device(s) being carried")
		
+++ component created 
docontext:: ['@@', 'modelinfo', ':', 'description', '=', 'Model Information']
 	paths:: ['modelinfo']
 	attrs:: [{'description': 'Model Information'}]
	curcontext:: modelinfo ['modelinfo']
	Personis_base.Context(Identifier='modelinfo', Description='Model Information')
	[]
+++ context created ok
docomponent:: modeled
 	attrs:: [{'value_type': 'string', 'type': 'attribute', 'description': 'type of entity being modeled'}]
cobj = Personis_base.Component(Identifier="modeled",
		component_type="attribute",
		value_type="string",
		value_list="None",
		resolver="None",
		Description="type of entity being modeled")
		
+++ component created 
docomponent:: personisversion
 	attrs:: [{'value_type': 'string', 'type': 'attribute', 'description': 'version of the Personis version in use'}]
cobj = Personis_base.Component(Identifier="personisversion",
		component_type="attribute",
		value_type="string",
		value_list="None",
		resolver="None",
		Description="version of the Personis version in use")
		
+++ component created 
docontext:: ['@@', 'Personal', ':', 'description', '=', 'Personal data']
 	paths:: ['Personal']
 	attrs:: [{'description': 'Personal data'}]
	curcontext:: Personal ['Personal']
	Personis_base.Context(Identifier='Personal', Description='Personal data')
	[]
+++ context created ok
docomponent:: firstname
 	attrs:: [{'value_type': 'string', 'type': 'attribute', 'description': 'First name'}, {'value': 'Bob', 'evidence_type': 'explicit'}]
cobj = Personis_base.Component(Identifier="firstname",
		component_type="attribute",
		value_type="string",
		value_list="None",
		resolver="None",
		Description="First name")
		
+++ component created 
	evidence:: {'value': 'Bob', 'evidence_type': 'explicit'}

			evobj = Personis_base.Evidence(ev)
			themodel.tell(context=Personal, componentid=firstname, evidence={'comment': None, 'evidence_type': 'explicit', 'creation_time': 1418001990.536488, 'value': 'Bob', 'source': 'alice', 'flags': [], 'time': None, 'owner': 'alice', 'objectType': 'Evidence', 'useby': None})
			
docomponent:: lastname
 	attrs:: [{'value_type': 'string', 'type': 'attribute', 'description': 'Last name'}]
cobj = Personis_base.Component(Identifier="lastname",
		component_type="attribute",
		value_type="string",
		value_list="None",
		resolver="None",
		Description="Last name")
		
+++ component created 
docomponent:: gender
 	attrs:: [{'value_type': 'enum', 'type': 'attribute', 'description': 'Gender', 'value': ['male', 'female']}]
cobj = Personis_base.Component(Identifier="gender",
		component_type="attribute",
		value_type="enum",
		value_list="['male', 'female']",
		resolver="None",
		Description="Gender")
		
+++ component created 
docomponent:: email
 	attrs:: [{'value_type': 'string', 'type': 'attribute', 'description': 'email address', 'rule': "<default!./Personal/email> ~ '*' : NOTIFY 'http://www.somewhere.com/' 'email=' <./Personal/email>"}]
cobj = Personis_base.Component(Identifier="email",
		component_type="attribute",
		value_type="string",
		value_list="None",
		resolver="None",
		Description="email address")
		
subscription>>> 'Personal' ['email'] {'modelname': 'Alice', 'password': 'qwert', 'user': 'bob', 'statement': "<default!./Personal/email> ~ '*' : NOTIFY 'http://www.somewhere.com/' 'email=' <./Personal/email>"}
	sub:: Personal ['email'] {'password': 'qwert', 'user': 'bob', 'statement': "<default!./Personal/email> ~ '*' : NOTIFY 'http://www.somewhere.com/' 'email=' <./Personal/email>"}
+++ component created 
doview:: fullname
	 paths:: ['firstname', 'lastname']
docontext:: ['@@', 'Personal', '/', 'Health', ':', 'description', '=', 'Health information']
 	paths:: ['Personal/Health']
 	attrs:: [{'description': 'Health information'}]
	curcontext:: Personal/Health ['Personal', 'Health']
	Personis_base.Context(Identifier='Health', Description='Health information')
	['Personal']
+++ context created ok
	flaglist: ['goal']
docomponent:: weight
 	attrs:: [{'value_type': 'number', 'type': 'attribute', 'description': 'My Weight'}, {'flags': ['goal'], 'value': '75', 'evidence_type': 'explicit'}]
cobj = Personis_base.Component(Identifier="weight",
		component_type="attribute",
		value_type="number",
		value_list="None",
		resolver="None",
		Description="My Weight")
		
+++ component created 
	evidence:: {'flags': ['goal'], 'value': '75', 'evidence_type': 'explicit'}

			evobj = Personis_base.Evidence(ev)
			themodel.tell(context=Personal/Health, componentid=weight, evidence={'comment': None, 'evidence_type': 'explicit', 'creation_time': 1418001990.817633, 'value': '75', 'source': 'alice', 'flags': ['goal'], 'time': None, 'owner': 'alice', 'objectType': 'Evidence', 'useby': None})
			
docomponent:: sleep
 	attrs:: [{'value_type': 'string', 'type': 'attribute', 'description': 'Sleep info'}]
cobj = Personis_base.Component(Identifier="sleep",
		component_type="attribute",
		value_type="string",
		value_list="None",
		resolver="None",
		Description="Sleep info")
		
+++ component created 
docontext:: ['@@', 'People', ':', 'description', '=', 'Information about people who may be relevant to the user']
 	paths:: ['People']
 	attrs:: [{'description': 'Information about people who may be relevant to the user'}]
	curcontext:: People ['People']
	Personis_base.Context(Identifier='People', Description='Information about people who may be relevant to the user')
	[]
+++ context created ok
docomponent:: bob
 	attrs:: [{'value_type': 'string', 'type': 'attribute', 'description': "relevance of showing Bob's status"}]
cobj = Personis_base.Component(Identifier="bob",
		component_type="attribute",
		value_type="string",
		value_list="None",
		resolver="None",
		Description="relevance of showing Bob's status")
		
+++ component created 
docomponent:: fullname
 	attrs:: [{'value_type': 'JSON', 'type': 'attribute', 'description': 'first+last name JSON encoded'}]
cobj = Personis_base.Component(Identifier="fullname",
		component_type="attribute",
		value_type="JSON",
		value_list="None",
		resolver="None",
		Description="first+last name JSON encoded")
		
+++ component created 
docontext:: ['@@', 'Preferences', ':', 'description', '=', 'preferences']
 	paths:: ['Preferences']
 	attrs:: [{'description': 'preferences'}]
	curcontext:: Preferences ['Preferences']
	Personis_base.Context(Identifier='Preferences', Description='preferences')
	[]
+++ context created ok
docontext:: ['@@', 'Preferences', '/', 'Music', ':', 'description', '=', 'Music preferences, playlists etc']
 	paths:: ['Preferences/Music']
 	attrs:: [{'description': 'Music preferences, playlists etc'}]
	curcontext:: Preferences/Music ['Preferences', 'Music']
	Personis_base.Context(Identifier='Music', Description='Music preferences, playlists etc')
	['Preferences']
+++ context created ok
docomponent:: playlist
 	attrs:: [{'value_type': 'string', 'type': 'attribute', 'description': 'Tracks on my playlist'}]
cobj = Personis_base.Component(Identifier="playlist",
		component_type="attribute",
		value_type="string",
		value_list="None",
		resolver="None",
		Description="Tracks on my playlist")
		
+++ component created 
docomponent:: played
 	attrs:: [{'value_type': 'string', 'type': 'attribute', 'description': 'Tracks played'}]
cobj = Personis_base.Component(Identifier="played",
		component_type="attribute",
		value_type="string",
		value_list="None",
		resolver="None",
		Description="Tracks played")
		
+++ component created 
docontext:: ['@@', 'Preferences', '/', 'Music', '/', 'Jazz', ':', 'description', '=', 'preferences for Jazz']
 	paths:: ['Preferences/Music/Jazz']
 	attrs:: [{'description': 'preferences for Jazz'}]
	curcontext:: Preferences/Music/Jazz ['Preferences', 'Music', 'Jazz']
	Personis_base.Context(Identifier='Jazz', Description='preferences for Jazz')
	['Preferences', 'Music']
+++ context created ok
docontext:: ['@@', 'Preferences', '/', 'Music', '/', 'Jazz', '/', 'Artists', ':', 'description', '=', 'preferences for Jazz artists']
 	paths:: ['Preferences/Music/Jazz/Artists']
 	attrs:: [{'description': 'preferences for Jazz artists'}]
	curcontext:: Preferences/Music/Jazz/Artists ['Preferences', 'Music', 'Jazz', 'Artists']
	Personis_base.Context(Identifier='Artists', Description='preferences for Jazz artists')
	['Preferences', 'Music', 'Jazz']
+++ context created ok
docomponent:: Miles_Davis
 	attrs:: [{'value_type': 'number', 'type': 'preference', 'description': 'Miles Davis'}]
cobj = Personis_base.Component(Identifier="Miles_Davis",
		component_type="preference",
		value_type="number",
		value_list="None",
		resolver="None",
		Description="Miles Davis")
		
+++ component created 
docontext:: ['@@', 'Preferences', '/', 'Food', ':', 'description', '=', 'Food preferences']
 	paths:: ['Preferences/Food']
 	attrs:: [{'description': 'Food preferences'}]
	curcontext:: Preferences/Food ['Preferences', 'Food']
	Personis_base.Context(Identifier='Food', Description='Food preferences')
	['Preferences']
+++ context created ok
docontext:: ['@@', 'Preferences', '/', 'Food', '/', 'Thai', ':', 'description', '=', 'Thai food preferences']
 	paths:: ['Preferences/Food/Thai']
 	attrs:: [{'description': 'Thai food preferences'}]
	curcontext:: Preferences/Food/Thai ['Preferences', 'Food', 'Thai']
	Personis_base.Context(Identifier='Thai', Description='Thai food preferences')
	['Preferences', 'Food']
+++ context created ok
docomponent:: orders
 	attrs:: [{'value_type': 'string', 'type': 'attribute', 'description': 'orders'}]
cobj = Personis_base.Component(Identifier="orders",
		component_type="attribute",
		value_type="string",
		value_list="None",
		resolver="None",
		Description="orders")
		
+++ component created 
docomponent:: preferences
 	attrs:: [{'value_type': 'string', 'type': 'attribute', 'description': 'preferred thai dishes'}]
cobj = Personis_base.Component(Identifier="preferences",
		component_type="attribute",
		value_type="string",
		value_list="None",
		resolver="None",
		Description="preferred thai dishes")
		
+++ component created 
docontext:: ['@@', 'Temp', ':', 'description', '=', 'work area']
 	paths:: ['Temp']
 	attrs:: [{'description': 'work area'}]
	curcontext:: Temp ['Temp']
	Personis_base.Context(Identifier='Temp', Description='work area')
	[]
+++ context created ok
--------------------------------
